## DFS와 BFS

: 비선형구조인 그래프로 표현된 모든 자료를 빠짐없이 검색하는 방법

### 1\. 깊이 우선 탐색(Depth  First Search, DFS)

: 시작 정점의 한 방향으로 갈 수 있는 경로가 있는 곳까지 깊이 탐색해 가다가 더 이상 갈 곳이 없게 되면, 가장 마지막에 만났던 갈림길 간선이 있는 정점으로 되돌아와서 다른 방향의 정점으로 탐색을 계속 반복하여 결국 모든 정점을 방문하는 순회방법

가장 마지막에 만났던 갈림길의 정점으로 되돌아가서 다시 깊이 우선탐색을 반복해야 하므로 후입선출 구조의 스택 사용

### 2\. 너비 우선 탐색(Breadth First Search, BFS)

: 탐색 시작점의 인접한 정점들을 먼저 모두 차례로 방문한 후에, 방문했던 정점을 시작점으로 하여 다시 인접한 정점들을 차례로 방문하는 방식

인접한 정점들에 대해 탐색을 한 후, 차례로 다시 너비우선탐색을 진행해야 하므로, 선입선출 형태의 자료구조인 큐 사용

---

## Stack과 Queue

### 공통점

: 삽입과 삭제의 위치가 제한적인 자료구조이다.

\- 스택의 삽입과 삭제는 모두 뒤에서 이루어는 구조

\- 큐의 뒤에서는 삽입만 하고, 큐의 앞에서는 삭제만 이루어지는 구조

### 차이점

스택: 후입선출구조

큐: 선입선출구조

---

## Stack으로 DFS 구현


```
def dfs(start_node):
    stack = [start_node]
	# 출력 순서 저장할 리스트
    used = []

    while stack:
        node = stack.pop() # 후입선출
        if node not in used:
            used.append(node)
            for i in range(len(arr[node])-1, -1, -1):
                if arr[node][i] == 1:
                    stack.append(i)
    print(used)


arr = [
    [0, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 0],
    [0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0]
]

dfs(0)
```

---

## Queue로 BFS 구현


```
def bfs(start_node):
    queue = [start_node]
    # 출력 순서 저장할 리스트
    used = []
    while queue:
        node = queue.pop(0) # 선입선출
        used.append(node)
        for i in range(len(arr[node])):
            if arr[node][i] == 1:
                queue.append(i)
    print(used)

arr = [
    [0, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 0],
    [0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0]
]

bfs(0)
```
